#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ sinexp1D
"""
import sys
sys.path.append('../pabbo_method')

import torch
import numpy as np
import matplotlib.pyplot as plt
from data.function import sinexp1D

print("=" * 60)
print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ sinexp1D: y(x) = sin(x) + e^x")
print("=" * 60)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
print("\n‚úÖ –§—É–Ω–∫—Ü–∏—è sinexp1D —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")

# 2. –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ
x_test = torch.tensor([[0.5]])
y_test = sinexp1D(x_test, negate=False, add_dim=True)
print(f"\nüìä –¢–µ—Å—Ç –Ω–∞ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ:")
print(f"   x = 0.5")
print(f"   y = sin(0.5) + e^0.5 = {y_test.item():.4f}")
print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ: {np.sin(0.5) + np.exp(0.5):.4f}")

# 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
print(f"\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")

x_range = [-1, 1]
x = torch.linspace(x_range[0], x_range[1], 1000).unsqueeze(-1)

# –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
y = sinexp1D(x, negate=False, add_dim=False)

# –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (negated)
y_opt = sinexp1D(x, negate=True, add_dim=False)

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
fig, axes = plt.subplots(1, 2, figsize=(14, 5))

# –ì—Ä–∞—Ñ–∏–∫ 1: –ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
ax = axes[0]
ax.plot(x.numpy(), y.numpy(), 'b-', linewidth=2, label='y(x) = sin(x) + e^x')
ax.axhline(y=0, color='k', linestyle='--', alpha=0.3)
ax.axvline(x=0, color='k', linestyle='--', alpha=0.3)
ax.grid(True, alpha=0.3)
ax.set_xlabel('x', fontsize=12)
ax.set_ylabel('y', fontsize=12)
ax.set_title('–ò—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è', fontsize=14, fontweight='bold')
ax.legend(fontsize=10)

# –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–º–µ—á–∞–µ–º –º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º
max_idx = torch.argmax(y)
min_idx = torch.argmin(y)
ax.plot(x[max_idx].item(), y[max_idx].item(), 'ro', markersize=10,
        label=f'Max: ({x[max_idx].item():.3f}, {y[max_idx].item():.3f})')
ax.plot(x[min_idx].item(), y[min_idx].item(), 'go', markersize=10,
        label=f'Min: ({x[min_idx].item():.3f}, {y[min_idx].item():.3f})')
ax.legend(fontsize=9)

# –ì—Ä–∞—Ñ–∏–∫ 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏
ax = axes[1]
ax.plot(x.numpy(), y_opt.numpy(), 'r-', linewidth=2, label='-y(x)')
ax.axhline(y=0, color='k', linestyle='--', alpha=0.3)
ax.axvline(x=0, color='k', linestyle='--', alpha=0.3)
ax.grid(True, alpha=0.3)
ax.set_xlabel('x', fontsize=12)
ax.set_ylabel('-y', fontsize=12)
ax.set_title('–§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ (PABBO)', fontsize=14, fontweight='bold')
ax.legend(fontsize=10)

# –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–º–µ—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º (–æ–ø—Ç–∏–º—É–º –¥–ª—è PABBO)
opt_idx = torch.argmax(y_opt)
opt_x = x[opt_idx].item()
opt_y = y_opt[opt_idx].item()
ax.plot(opt_x, opt_y, 'r*', markersize=15,
        label=f'Optimum: x*={opt_x:.3f}, y*={opt_y:.3f}')
ax.legend(fontsize=9)

plt.tight_layout()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
output_path = 'sinexp1D_visualization.png'
plt.savefig(output_path, dpi=150, bbox_inches='tight')
print(f"   –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
# plt.show()

# 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {x_range}:")
print(f"   Min y: {y.min().item():.4f} –ø—Ä–∏ x = {x[torch.argmin(y)].item():.4f}")
print(f"   Max y: {y.max().item():.4f} –ø—Ä–∏ x = {x[torch.argmax(y)].item():.4f}")
print(f"   Mean y: {y.mean().item():.4f}")
print(f"   Std y: {y.std().item():.4f}")

print(f"\nüìä –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ PABBO (–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è -y):")
print(f"   –û–ø—Ç–∏–º—É–º: x* = {opt_x:.4f}, -y* = {opt_y:.4f}")
print(f"   (—á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç y = {-opt_y:.4f})")

# 5. –¢–µ—Å—Ç –±–∞—Ç—á–∞
print(f"\nüî¨ –¢–µ—Å—Ç –Ω–∞ –±–∞—Ç—á–µ —Ç–æ—á–µ–∫:")
x_batch = torch.tensor([[[0.0]], [[0.5]], [[1.0]]])  # shape: (3, 1, 1)
y_batch = sinexp1D(x_batch, negate=False, add_dim=True)
print(f"   Input shape: {x_batch.shape}")
print(f"   Output shape: {y_batch.shape}")
print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
for i in range(len(x_batch)):
    print(f"      x={x_batch[i,0,0].item():.1f} ‚Üí y={y_batch[i,0,0].item():.4f}")

print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print(f"   1. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ train.py")
print(f"   2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –Ω–æ—á—å")
print(f"   3. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞ CPU: ~2-4 —á–∞—Å–∞ –¥–ª—è 8000 —à–∞–≥–æ–≤")
print(f"   4. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à–µ —à–∞–≥–æ–≤ (n_steps=500)")
print("=" * 60)
